<?php
/**
 * CompanyDevelopersDeveloperTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Company Developers API
 *
 * Associate developers with a company.  The company developer creates apps on behalf of the company. Any apps created by a company developer are associated with the company and known as \"company apps.\"  A developer must exist before you can associate them with a company.  When you add a developer to a company, you specify the developer's email and assign the developer a role. Company developer roles are enforced by the client app that you build using the API, not by Apigee. Therefore, when you retrieve a list of company apps on behalf of a developer, it is your code that checks the developer's role and displays the capabilities appropriate for that role. You typically create an admin role to allow a company developer to add other developers, delete company apps, and so on. Company developers are mapped to developers in your organization using the developer email as a key. The mapping associates the developer with the company and adds a role. The company developer entity simply stores an email address and a role while the organization developer entity that it maps to can have a wide variety of attributes defined.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CompanyDevelopersDeveloperTest Class Doc Comment
 *
 * @category    Class
 * @description CompanyDevelopersDeveloper
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CompanyDevelopersDeveloperTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CompanyDevelopersDeveloper"
     */
    public function testCompanyDevelopersDeveloper()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "role"
     */
    public function testPropertyRole()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
