<?php
/**
 * DeveloperApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Developers API
 *
 * Developers must register with an organization on Apigee Edge. After they are registered, developers register their apps, choose the APIs they want to use, and receive the unique API credentials (consumer keys and secrets) needed to access your APIs.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeveloperApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeveloperApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDeveloper
     *
     * Create developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Developer
     */
    public function createDeveloper($org_name, $developer_request = null)
    {
        list($response) = $this->createDeveloperWithHttpInfo($org_name, $developer_request);
        return $response;
    }

    /**
     * Operation createDeveloperWithHttpInfo
     *
     * Create developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeveloperWithHttpInfo($org_name, $developer_request = null)
    {
        $request = $this->createDeveloperRequest($org_name, $developer_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Developer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Developer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Developer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Developer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeveloperAsync
     *
     * Create developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeveloperAsync($org_name, $developer_request = null)
    {
        return $this->createDeveloperAsyncWithHttpInfo($org_name, $developer_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeveloperAsyncWithHttpInfo
     *
     * Create developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeveloperAsyncWithHttpInfo($org_name, $developer_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\Developer';
        $request = $this->createDeveloperRequest($org_name, $developer_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeveloper'
     *
     * @param  string $org_name Organization name. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeveloperRequest($org_name, $developer_request = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling createDeveloper'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($developer_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($developer_request));
            } else {
                $httpBody = $developer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeveloper
     *
     * Delete developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Developer
     */
    public function deleteDeveloper($org_name, $developer_email)
    {
        list($response) = $this->deleteDeveloperWithHttpInfo($org_name, $developer_email);
        return $response;
    }

    /**
     * Operation deleteDeveloperWithHttpInfo
     *
     * Delete developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeveloperWithHttpInfo($org_name, $developer_email)
    {
        $request = $this->deleteDeveloperRequest($org_name, $developer_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Developer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Developer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Developer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Developer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeveloperAsync
     *
     * Delete developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeveloperAsync($org_name, $developer_email)
    {
        return $this->deleteDeveloperAsyncWithHttpInfo($org_name, $developer_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeveloperAsyncWithHttpInfo
     *
     * Delete developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeveloperAsyncWithHttpInfo($org_name, $developer_email)
    {
        $returnType = '\OpenAPI\Client\Model\Developer';
        $request = $this->deleteDeveloperRequest($org_name, $developer_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeveloper'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDeveloperRequest($org_name, $developer_email)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling deleteDeveloper'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling deleteDeveloper'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeveloperAttribute
     *
     * Delete developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attribute
     */
    public function deleteDeveloperAttribute($org_name, $developer_email, $attribute_name)
    {
        list($response) = $this->deleteDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name);
        return $response;
    }

    /**
     * Operation deleteDeveloperAttributeWithHttpInfo
     *
     * Delete developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name)
    {
        $request = $this->deleteDeveloperAttributeRequest($org_name, $developer_email, $attribute_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attribute' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attribute', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attribute';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attribute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeveloperAttributeAsync
     *
     * Delete developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeveloperAttributeAsync($org_name, $developer_email, $attribute_name)
    {
        return $this->deleteDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeveloperAttributeAsyncWithHttpInfo
     *
     * Delete developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name)
    {
        $returnType = '\OpenAPI\Client\Model\Attribute';
        $request = $this->deleteDeveloperAttributeRequest($org_name, $developer_email, $attribute_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeveloperAttribute'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDeveloperAttributeRequest($org_name, $developer_email, $attribute_name)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling deleteDeveloperAttribute'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling deleteDeveloperAttribute'
            );
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null || (is_array($attribute_name) && count($attribute_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_name when calling deleteDeveloperAttribute'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}/attributes/{attribute_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                '{' . 'attribute_name' . '}',
                ObjectSerializer::toPathValue($attribute_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeveloper
     *
     * Get developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Developer
     */
    public function getDeveloper($org_name, $developer_email)
    {
        list($response) = $this->getDeveloperWithHttpInfo($org_name, $developer_email);
        return $response;
    }

    /**
     * Operation getDeveloperWithHttpInfo
     *
     * Get developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeveloperWithHttpInfo($org_name, $developer_email)
    {
        $request = $this->getDeveloperRequest($org_name, $developer_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Developer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Developer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Developer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Developer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeveloperAsync
     *
     * Get developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAsync($org_name, $developer_email)
    {
        return $this->getDeveloperAsyncWithHttpInfo($org_name, $developer_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeveloperAsyncWithHttpInfo
     *
     * Get developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAsyncWithHttpInfo($org_name, $developer_email)
    {
        $returnType = '\OpenAPI\Client\Model\Developer';
        $request = $this->getDeveloperRequest($org_name, $developer_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeveloper'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeveloperRequest($org_name, $developer_email)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling getDeveloper'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling getDeveloper'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeveloperAttribute
     *
     * Get developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attribute
     */
    public function getDeveloperAttribute($org_name, $developer_email, $attribute_name)
    {
        list($response) = $this->getDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name);
        return $response;
    }

    /**
     * Operation getDeveloperAttributeWithHttpInfo
     *
     * Get developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name)
    {
        $request = $this->getDeveloperAttributeRequest($org_name, $developer_email, $attribute_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attribute' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attribute', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attribute';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attribute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeveloperAttributeAsync
     *
     * Get developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAttributeAsync($org_name, $developer_email, $attribute_name)
    {
        return $this->getDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeveloperAttributeAsyncWithHttpInfo
     *
     * Get developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name)
    {
        $returnType = '\OpenAPI\Client\Model\Attribute';
        $request = $this->getDeveloperAttributeRequest($org_name, $developer_email, $attribute_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeveloperAttribute'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeveloperAttributeRequest($org_name, $developer_email, $attribute_name)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling getDeveloperAttribute'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling getDeveloperAttribute'
            );
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null || (is_array($attribute_name) && count($attribute_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_name when calling getDeveloperAttribute'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}/attributes/{attribute_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                '{' . 'attribute_name' . '}',
                ObjectSerializer::toPathValue($attribute_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeveloperAttributes
     *
     * Get developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attributes
     */
    public function getDeveloperAttributes($org_name, $developer_email)
    {
        list($response) = $this->getDeveloperAttributesWithHttpInfo($org_name, $developer_email);
        return $response;
    }

    /**
     * Operation getDeveloperAttributesWithHttpInfo
     *
     * Get developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attributes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeveloperAttributesWithHttpInfo($org_name, $developer_email)
    {
        $request = $this->getDeveloperAttributesRequest($org_name, $developer_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attributes' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attributes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attributes';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attributes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeveloperAttributesAsync
     *
     * Get developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAttributesAsync($org_name, $developer_email)
    {
        return $this->getDeveloperAttributesAsyncWithHttpInfo($org_name, $developer_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeveloperAttributesAsyncWithHttpInfo
     *
     * Get developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeveloperAttributesAsyncWithHttpInfo($org_name, $developer_email)
    {
        $returnType = '\OpenAPI\Client\Model\Attributes';
        $request = $this->getDeveloperAttributesRequest($org_name, $developer_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeveloperAttributes'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeveloperAttributesRequest($org_name, $developer_email)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling getDeveloperAttributes'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling getDeveloperAttributes'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDevelopers
     *
     * List developers
     *
     * @param  string $org_name Organization name. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each developer. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of developers to return in the API call. The limit is 1000. Use with the &#x60;startKey&#x60; parameter to provide more targeted filtering. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. Email of a developer from which to start displaying the list of developers.  For example, if the an unfiltered list returns:  &#x60;&#x60;&#x60; westley@example.com fezzik@example.com   buttercup@example.com    &#x60;&#x60;&#x60;  If your &#x60;startKey&#x60; is &#x60;fezzik@example.com&#x60;, the returned list will be:  &#x60;&#x60;&#x60; fezzik@example.com   buttercup@example.com  &#x60;&#x60;&#x60; (optional)
     * @param  string $app Name of the app for which you want to return associated developers. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfArrayDevelopers
     */
    public function listDevelopers($org_name, $expand = null, $count = null, $start_key = null, $app = null)
    {
        list($response) = $this->listDevelopersWithHttpInfo($org_name, $expand, $count, $start_key, $app);
        return $response;
    }

    /**
     * Operation listDevelopersWithHttpInfo
     *
     * List developers
     *
     * @param  string $org_name Organization name. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each developer. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of developers to return in the API call. The limit is 1000. Use with the &#x60;startKey&#x60; parameter to provide more targeted filtering. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. Email of a developer from which to start displaying the list of developers.  For example, if the an unfiltered list returns:  &#x60;&#x60;&#x60; westley@example.com fezzik@example.com   buttercup@example.com    &#x60;&#x60;&#x60;  If your &#x60;startKey&#x60; is &#x60;fezzik@example.com&#x60;, the returned list will be:  &#x60;&#x60;&#x60; fezzik@example.com   buttercup@example.com  &#x60;&#x60;&#x60; (optional)
     * @param  string $app Name of the app for which you want to return associated developers. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfArrayDevelopers, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDevelopersWithHttpInfo($org_name, $expand = null, $count = null, $start_key = null, $app = null)
    {
        $request = $this->listDevelopersRequest($org_name, $expand, $count, $start_key, $app);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('OneOfArrayDevelopers' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfArrayDevelopers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfArrayDevelopers';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfArrayDevelopers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDevelopersAsync
     *
     * List developers
     *
     * @param  string $org_name Organization name. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each developer. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of developers to return in the API call. The limit is 1000. Use with the &#x60;startKey&#x60; parameter to provide more targeted filtering. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. Email of a developer from which to start displaying the list of developers.  For example, if the an unfiltered list returns:  &#x60;&#x60;&#x60; westley@example.com fezzik@example.com   buttercup@example.com    &#x60;&#x60;&#x60;  If your &#x60;startKey&#x60; is &#x60;fezzik@example.com&#x60;, the returned list will be:  &#x60;&#x60;&#x60; fezzik@example.com   buttercup@example.com  &#x60;&#x60;&#x60; (optional)
     * @param  string $app Name of the app for which you want to return associated developers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDevelopersAsync($org_name, $expand = null, $count = null, $start_key = null, $app = null)
    {
        return $this->listDevelopersAsyncWithHttpInfo($org_name, $expand, $count, $start_key, $app)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDevelopersAsyncWithHttpInfo
     *
     * List developers
     *
     * @param  string $org_name Organization name. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each developer. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of developers to return in the API call. The limit is 1000. Use with the &#x60;startKey&#x60; parameter to provide more targeted filtering. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. Email of a developer from which to start displaying the list of developers.  For example, if the an unfiltered list returns:  &#x60;&#x60;&#x60; westley@example.com fezzik@example.com   buttercup@example.com    &#x60;&#x60;&#x60;  If your &#x60;startKey&#x60; is &#x60;fezzik@example.com&#x60;, the returned list will be:  &#x60;&#x60;&#x60; fezzik@example.com   buttercup@example.com  &#x60;&#x60;&#x60; (optional)
     * @param  string $app Name of the app for which you want to return associated developers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDevelopersAsyncWithHttpInfo($org_name, $expand = null, $count = null, $start_key = null, $app = null)
    {
        $returnType = 'OneOfArrayDevelopers';
        $request = $this->listDevelopersRequest($org_name, $expand, $count, $start_key, $app);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDevelopers'
     *
     * @param  string $org_name Organization name. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each developer. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of developers to return in the API call. The limit is 1000. Use with the &#x60;startKey&#x60; parameter to provide more targeted filtering. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. Email of a developer from which to start displaying the list of developers.  For example, if the an unfiltered list returns:  &#x60;&#x60;&#x60; westley@example.com fezzik@example.com   buttercup@example.com    &#x60;&#x60;&#x60;  If your &#x60;startKey&#x60; is &#x60;fezzik@example.com&#x60;, the returned list will be:  &#x60;&#x60;&#x60; fezzik@example.com   buttercup@example.com  &#x60;&#x60;&#x60; (optional)
     * @param  string $app Name of the app for which you want to return associated developers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDevelopersRequest($org_name, $expand = null, $count = null, $start_key = null, $app = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling listDevelopers'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            if('form' === 'form' && is_array($expand)) {
                foreach($expand as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expand'] = $expand;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_key !== null) {
            if('form' === 'form' && is_array($start_key)) {
                foreach($start_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startKey'] = $start_key;
            }
        }
        // query params
        if ($app !== null) {
            if('form' === 'form' && is_array($app)) {
                foreach($app as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['app'] = $app;
            }
        }


        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDeveloperStatus
     *
     * Set developer status
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $action Status of developer. Set to &#x60;active&#x60; or &#x60;inactive&#x60;. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setDeveloperStatus($org_name, $developer_email, $action)
    {
        $this->setDeveloperStatusWithHttpInfo($org_name, $developer_email, $action);
    }

    /**
     * Operation setDeveloperStatusWithHttpInfo
     *
     * Set developer status
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $action Status of developer. Set to &#x60;active&#x60; or &#x60;inactive&#x60;. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDeveloperStatusWithHttpInfo($org_name, $developer_email, $action)
    {
        $request = $this->setDeveloperStatusRequest($org_name, $developer_email, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setDeveloperStatusAsync
     *
     * Set developer status
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $action Status of developer. Set to &#x60;active&#x60; or &#x60;inactive&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDeveloperStatusAsync($org_name, $developer_email, $action)
    {
        return $this->setDeveloperStatusAsyncWithHttpInfo($org_name, $developer_email, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDeveloperStatusAsyncWithHttpInfo
     *
     * Set developer status
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $action Status of developer. Set to &#x60;active&#x60; or &#x60;inactive&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDeveloperStatusAsyncWithHttpInfo($org_name, $developer_email, $action)
    {
        $returnType = '';
        $request = $this->setDeveloperStatusRequest($org_name, $developer_email, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDeveloperStatus'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $action Status of developer. Set to &#x60;active&#x60; or &#x60;inactive&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setDeveloperStatusRequest($org_name, $developer_email, $action)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling setDeveloperStatus'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling setDeveloperStatus'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling setDeveloperStatus'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }


        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeveloper
     *
     * Update developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Developer
     */
    public function updateDeveloper($org_name, $developer_email, $developer_request = null)
    {
        list($response) = $this->updateDeveloperWithHttpInfo($org_name, $developer_email, $developer_request);
        return $response;
    }

    /**
     * Operation updateDeveloperWithHttpInfo
     *
     * Update developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeveloperWithHttpInfo($org_name, $developer_email, $developer_request = null)
    {
        $request = $this->updateDeveloperRequest($org_name, $developer_email, $developer_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Developer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Developer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Developer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Developer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeveloperAsync
     *
     * Update developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAsync($org_name, $developer_email, $developer_request = null)
    {
        return $this->updateDeveloperAsyncWithHttpInfo($org_name, $developer_email, $developer_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeveloperAsyncWithHttpInfo
     *
     * Update developer
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAsyncWithHttpInfo($org_name, $developer_email, $developer_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\Developer';
        $request = $this->updateDeveloperRequest($org_name, $developer_email, $developer_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeveloper'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\DeveloperRequest $developer_request Developer details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeveloperRequest($org_name, $developer_email, $developer_request = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling updateDeveloper'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling updateDeveloper'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($developer_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($developer_request));
            } else {
                $httpBody = $developer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeveloperAttribute
     *
     * Update developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $inline_object inline_object (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attribute
     */
    public function updateDeveloperAttribute($org_name, $developer_email, $attribute_name, $inline_object = null)
    {
        list($response) = $this->updateDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name, $inline_object);
        return $response;
    }

    /**
     * Operation updateDeveloperAttributeWithHttpInfo
     *
     * Update developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $inline_object (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attribute, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeveloperAttributeWithHttpInfo($org_name, $developer_email, $attribute_name, $inline_object = null)
    {
        $request = $this->updateDeveloperAttributeRequest($org_name, $developer_email, $attribute_name, $inline_object);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attribute' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attribute', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attribute';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attribute',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeveloperAttributeAsync
     *
     * Update developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $inline_object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAttributeAsync($org_name, $developer_email, $attribute_name, $inline_object = null)
    {
        return $this->updateDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name, $inline_object)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeveloperAttributeAsyncWithHttpInfo
     *
     * Update developer attribute
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $inline_object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAttributeAsyncWithHttpInfo($org_name, $developer_email, $attribute_name, $inline_object = null)
    {
        $returnType = '\OpenAPI\Client\Model\Attribute';
        $request = $this->updateDeveloperAttributeRequest($org_name, $developer_email, $attribute_name, $inline_object);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeveloperAttribute'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  string $attribute_name Name of the attribute. (required)
     * @param  \OpenAPI\Client\Model\InlineObject $inline_object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeveloperAttributeRequest($org_name, $developer_email, $attribute_name, $inline_object = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling updateDeveloperAttribute'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling updateDeveloperAttribute'
            );
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null || (is_array($attribute_name) && count($attribute_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_name when calling updateDeveloperAttribute'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}/attributes/{attribute_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                '{' . 'attribute_name' . '}',
                ObjectSerializer::toPathValue($attribute_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object));
            } else {
                $httpBody = $inline_object;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeveloperAttributes
     *
     * Update developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\Attributes $attributes Developer attributes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Attributes
     */
    public function updateDeveloperAttributes($org_name, $developer_email, $attributes = null)
    {
        list($response) = $this->updateDeveloperAttributesWithHttpInfo($org_name, $developer_email, $attributes);
        return $response;
    }

    /**
     * Operation updateDeveloperAttributesWithHttpInfo
     *
     * Update developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\Attributes $attributes Developer attributes. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Attributes, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeveloperAttributesWithHttpInfo($org_name, $developer_email, $attributes = null)
    {
        $request = $this->updateDeveloperAttributesRequest($org_name, $developer_email, $attributes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Attributes' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Attributes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Attributes';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Attributes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeveloperAttributesAsync
     *
     * Update developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\Attributes $attributes Developer attributes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAttributesAsync($org_name, $developer_email, $attributes = null)
    {
        return $this->updateDeveloperAttributesAsyncWithHttpInfo($org_name, $developer_email, $attributes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeveloperAttributesAsyncWithHttpInfo
     *
     * Update developer attributes
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\Attributes $attributes Developer attributes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeveloperAttributesAsyncWithHttpInfo($org_name, $developer_email, $attributes = null)
    {
        $returnType = '\OpenAPI\Client\Model\Attributes';
        $request = $this->updateDeveloperAttributesRequest($org_name, $developer_email, $attributes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeveloperAttributes'
     *
     * @param  string $org_name Organization name. (required)
     * @param  string $developer_email Email address for the developer. (required)
     * @param  \OpenAPI\Client\Model\Attributes $attributes Developer attributes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeveloperAttributesRequest($org_name, $developer_email, $attributes = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling updateDeveloperAttributes'
            );
        }
        // verify the required parameter 'developer_email' is set
        if ($developer_email === null || (is_array($developer_email) && count($developer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_email when calling updateDeveloperAttributes'
            );
        }

        $resourcePath = '/organizations/{org_name}/developers/{developer_email}/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($developer_email !== null) {
            $resourcePath = str_replace(
                '{' . 'developer_email' . '}',
                ObjectSerializer::toPathValue($developer_email),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($attributes)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($attributes));
            } else {
                $httpBody = $attributes;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
