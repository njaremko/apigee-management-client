<?php
/**
 * CompanyAppApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Company apps API
 *
 * A consumer/client app associated with a company entity. For more information,     see <a href=\"https://docs.apigee.com/api-platform/publish/creating-apps-surface-your-api\">Register apps and manage API keys</a>.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CompanyAppApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompanyAppApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveRevokeCompanyApp
     *
     * Approve or revoke a company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  string $action Action to perform. Valid values include &#x60;approved&#x60; or &#x60;revoked&#x60;. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function approveRevokeCompanyApp($org_name, $company_name, $app_name, $action)
    {
        $this->approveRevokeCompanyAppWithHttpInfo($org_name, $company_name, $app_name, $action);
    }

    /**
     * Operation approveRevokeCompanyAppWithHttpInfo
     *
     * Approve or revoke a company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  string $action Action to perform. Valid values include &#x60;approved&#x60; or &#x60;revoked&#x60;. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveRevokeCompanyAppWithHttpInfo($org_name, $company_name, $app_name, $action)
    {
        $request = $this->approveRevokeCompanyAppRequest($org_name, $company_name, $app_name, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation approveRevokeCompanyAppAsync
     *
     * Approve or revoke a company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  string $action Action to perform. Valid values include &#x60;approved&#x60; or &#x60;revoked&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveRevokeCompanyAppAsync($org_name, $company_name, $app_name, $action)
    {
        return $this->approveRevokeCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveRevokeCompanyAppAsyncWithHttpInfo
     *
     * Approve or revoke a company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  string $action Action to perform. Valid values include &#x60;approved&#x60; or &#x60;revoked&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveRevokeCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name, $action)
    {
        $returnType = '';
        $request = $this->approveRevokeCompanyAppRequest($org_name, $company_name, $app_name, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveRevokeCompanyApp'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  string $action Action to perform. Valid values include &#x60;approved&#x60; or &#x60;revoked&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveRevokeCompanyAppRequest($org_name, $company_name, $app_name, $action)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling approveRevokeCompanyApp'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling approveRevokeCompanyApp'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling approveRevokeCompanyApp'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling approveRevokeCompanyApp'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps/{app_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($action !== null) {
            if('form' === 'form' && is_array($action)) {
                foreach($action as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['action'] = $action;
            }
        }


        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCompanyApp
     *
     * Create company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CompanyApp
     */
    public function createCompanyApp($org_name, $company_name, $company_app = null)
    {
        list($response) = $this->createCompanyAppWithHttpInfo($org_name, $company_name, $company_app);
        return $response;
    }

    /**
     * Operation createCompanyAppWithHttpInfo
     *
     * Create company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CompanyApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCompanyAppWithHttpInfo($org_name, $company_name, $company_app = null)
    {
        $request = $this->createCompanyAppRequest($org_name, $company_name, $company_app);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CompanyApp' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CompanyApp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CompanyApp';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CompanyApp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCompanyAppAsync
     *
     * Create company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCompanyAppAsync($org_name, $company_name, $company_app = null)
    {
        return $this->createCompanyAppAsyncWithHttpInfo($org_name, $company_name, $company_app)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCompanyAppAsyncWithHttpInfo
     *
     * Create company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCompanyAppAsyncWithHttpInfo($org_name, $company_name, $company_app = null)
    {
        $returnType = '\OpenAPI\Client\Model\CompanyApp';
        $request = $this->createCompanyAppRequest($org_name, $company_name, $company_app);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCompanyApp'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCompanyAppRequest($org_name, $company_name, $company_app = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling createCompanyApp'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling createCompanyApp'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($company_app)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($company_app));
            } else {
                $httpBody = $company_app;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCompanyApp
     *
     * Delete company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CompanyApp
     */
    public function deleteCompanyApp($org_name, $company_name, $app_name)
    {
        list($response) = $this->deleteCompanyAppWithHttpInfo($org_name, $company_name, $app_name);
        return $response;
    }

    /**
     * Operation deleteCompanyAppWithHttpInfo
     *
     * Delete company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CompanyApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCompanyAppWithHttpInfo($org_name, $company_name, $app_name)
    {
        $request = $this->deleteCompanyAppRequest($org_name, $company_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CompanyApp' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CompanyApp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CompanyApp';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CompanyApp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCompanyAppAsync
     *
     * Delete company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyAppAsync($org_name, $company_name, $app_name)
    {
        return $this->deleteCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCompanyAppAsyncWithHttpInfo
     *
     * Delete company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name)
    {
        $returnType = '\OpenAPI\Client\Model\CompanyApp';
        $request = $this->deleteCompanyAppRequest($org_name, $company_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCompanyApp'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCompanyAppRequest($org_name, $company_name, $app_name)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling deleteCompanyApp'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling deleteCompanyApp'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling deleteCompanyApp'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps/{app_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyApp
     *
     * Get company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CompanyApp
     */
    public function getCompanyApp($org_name, $company_name, $app_name)
    {
        list($response) = $this->getCompanyAppWithHttpInfo($org_name, $company_name, $app_name);
        return $response;
    }

    /**
     * Operation getCompanyAppWithHttpInfo
     *
     * Get company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CompanyApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyAppWithHttpInfo($org_name, $company_name, $app_name)
    {
        $request = $this->getCompanyAppRequest($org_name, $company_name, $app_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CompanyApp' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CompanyApp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CompanyApp';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CompanyApp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyAppAsync
     *
     * Get company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAppAsync($org_name, $company_name, $app_name)
    {
        return $this->getCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyAppAsyncWithHttpInfo
     *
     * Get company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAppAsyncWithHttpInfo($org_name, $company_name, $app_name)
    {
        $returnType = '\OpenAPI\Client\Model\CompanyApp';
        $request = $this->getCompanyAppRequest($org_name, $company_name, $app_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyApp'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyAppRequest($org_name, $company_name, $app_name)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling getCompanyApp'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling getCompanyApp'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling getCompanyApp'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps/{app_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompanyApps
     *
     * List company apps
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each app. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. Not applicable if you use the &#x60;count&#x60; or &#x60;startKey&#x60; query parameters. (optional)
     * @param  string $key_status **Apigee Edge for Private Cloud only**. Filter list to apps with specific key status. Valid values include &#x60;approved&#x60;, &#x60;pending&#x60;, or &#x60;revoked&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of company apps to return in the API call. The limit is 100. Required if you specify &#x60;startKey&#x60;. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. ID of the app from which to start displaying the list of apps.    For example, if the unfiltered list includes the following app names:  &#x60;&#x60;&#x60; \&quot;companyApp1\&quot;, \&quot;companyApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60;  If you set the &#x60;startKey&#x60; to &#x60;companyApp2&#x60;, the list will include:  &#x60;&#x60;&#x60; \&quot;companyrApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfArrayCompanyApps
     */
    public function listCompanyApps($org_name, $company_name, $expand = null, $key_status = null, $count = null, $start_key = null)
    {
        list($response) = $this->listCompanyAppsWithHttpInfo($org_name, $company_name, $expand, $key_status, $count, $start_key);
        return $response;
    }

    /**
     * Operation listCompanyAppsWithHttpInfo
     *
     * List company apps
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each app. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. Not applicable if you use the &#x60;count&#x60; or &#x60;startKey&#x60; query parameters. (optional)
     * @param  string $key_status **Apigee Edge for Private Cloud only**. Filter list to apps with specific key status. Valid values include &#x60;approved&#x60;, &#x60;pending&#x60;, or &#x60;revoked&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of company apps to return in the API call. The limit is 100. Required if you specify &#x60;startKey&#x60;. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. ID of the app from which to start displaying the list of apps.    For example, if the unfiltered list includes the following app names:  &#x60;&#x60;&#x60; \&quot;companyApp1\&quot;, \&quot;companyApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60;  If you set the &#x60;startKey&#x60; to &#x60;companyApp2&#x60;, the list will include:  &#x60;&#x60;&#x60; \&quot;companyrApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfArrayCompanyApps, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompanyAppsWithHttpInfo($org_name, $company_name, $expand = null, $key_status = null, $count = null, $start_key = null)
    {
        $request = $this->listCompanyAppsRequest($org_name, $company_name, $expand, $key_status, $count, $start_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('OneOfArrayCompanyApps' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfArrayCompanyApps', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfArrayCompanyApps';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfArrayCompanyApps',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCompanyAppsAsync
     *
     * List company apps
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each app. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. Not applicable if you use the &#x60;count&#x60; or &#x60;startKey&#x60; query parameters. (optional)
     * @param  string $key_status **Apigee Edge for Private Cloud only**. Filter list to apps with specific key status. Valid values include &#x60;approved&#x60;, &#x60;pending&#x60;, or &#x60;revoked&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of company apps to return in the API call. The limit is 100. Required if you specify &#x60;startKey&#x60;. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. ID of the app from which to start displaying the list of apps.    For example, if the unfiltered list includes the following app names:  &#x60;&#x60;&#x60; \&quot;companyApp1\&quot;, \&quot;companyApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60;  If you set the &#x60;startKey&#x60; to &#x60;companyApp2&#x60;, the list will include:  &#x60;&#x60;&#x60; \&quot;companyrApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyAppsAsync($org_name, $company_name, $expand = null, $key_status = null, $count = null, $start_key = null)
    {
        return $this->listCompanyAppsAsyncWithHttpInfo($org_name, $company_name, $expand, $key_status, $count, $start_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompanyAppsAsyncWithHttpInfo
     *
     * List company apps
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each app. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. Not applicable if you use the &#x60;count&#x60; or &#x60;startKey&#x60; query parameters. (optional)
     * @param  string $key_status **Apigee Edge for Private Cloud only**. Filter list to apps with specific key status. Valid values include &#x60;approved&#x60;, &#x60;pending&#x60;, or &#x60;revoked&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of company apps to return in the API call. The limit is 100. Required if you specify &#x60;startKey&#x60;. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. ID of the app from which to start displaying the list of apps.    For example, if the unfiltered list includes the following app names:  &#x60;&#x60;&#x60; \&quot;companyApp1\&quot;, \&quot;companyApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60;  If you set the &#x60;startKey&#x60; to &#x60;companyApp2&#x60;, the list will include:  &#x60;&#x60;&#x60; \&quot;companyrApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyAppsAsyncWithHttpInfo($org_name, $company_name, $expand = null, $key_status = null, $count = null, $start_key = null)
    {
        $returnType = 'OneOfArrayCompanyApps';
        $request = $this->listCompanyAppsRequest($org_name, $company_name, $expand, $key_status, $count, $start_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompanyApps'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  bool $expand Flag that specifies whether to view expanded details for each app. Set to &#x60;true&#x60; to view expanded details. Defaults to &#x60;false&#x60;. Not applicable if you use the &#x60;count&#x60; or &#x60;startKey&#x60; query parameters. (optional)
     * @param  string $key_status **Apigee Edge for Private Cloud only**. Filter list to apps with specific key status. Valid values include &#x60;approved&#x60;, &#x60;pending&#x60;, or &#x60;revoked&#x60;. (optional)
     * @param  int $count **Apigee Edge for Public Cloud only**. Number of company apps to return in the API call. The limit is 100. Required if you specify &#x60;startKey&#x60;. (optional)
     * @param  string $start_key **Apigee Edge for Public Cloud only**. ID of the app from which to start displaying the list of apps.    For example, if the unfiltered list includes the following app names:  &#x60;&#x60;&#x60; \&quot;companyApp1\&quot;, \&quot;companyApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60;  If you set the &#x60;startKey&#x60; to &#x60;companyApp2&#x60;, the list will include:  &#x60;&#x60;&#x60; \&quot;companyrApp2\&quot;, \&quot;companyApp3\&quot; &#x60;&#x60;&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCompanyAppsRequest($org_name, $company_name, $expand = null, $key_status = null, $count = null, $start_key = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling listCompanyApps'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling listCompanyApps'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            if('form' === 'form' && is_array($expand)) {
                foreach($expand as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expand'] = $expand;
            }
        }
        // query params
        if ($key_status !== null) {
            if('form' === 'form' && is_array($key_status)) {
                foreach($key_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyStatus'] = $key_status;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_key !== null) {
            if('form' === 'form' && is_array($start_key)) {
                foreach($start_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startKey'] = $start_key;
            }
        }


        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organizationsOrgNameCompaniesCompanyNameAppsAppNamePut
     *
     * Update company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CompanyApp
     */
    public function organizationsOrgNameCompaniesCompanyNameAppsAppNamePut($org_name, $company_name, $app_name, $company_app = null)
    {
        list($response) = $this->organizationsOrgNameCompaniesCompanyNameAppsAppNamePutWithHttpInfo($org_name, $company_name, $app_name, $company_app);
        return $response;
    }

    /**
     * Operation organizationsOrgNameCompaniesCompanyNameAppsAppNamePutWithHttpInfo
     *
     * Update company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CompanyApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function organizationsOrgNameCompaniesCompanyNameAppsAppNamePutWithHttpInfo($org_name, $company_name, $app_name, $company_app = null)
    {
        $request = $this->organizationsOrgNameCompaniesCompanyNameAppsAppNamePutRequest($org_name, $company_name, $app_name, $company_app);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CompanyApp' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CompanyApp', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CompanyApp';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CompanyApp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organizationsOrgNameCompaniesCompanyNameAppsAppNamePutAsync
     *
     * Update company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrgNameCompaniesCompanyNameAppsAppNamePutAsync($org_name, $company_name, $app_name, $company_app = null)
    {
        return $this->organizationsOrgNameCompaniesCompanyNameAppsAppNamePutAsyncWithHttpInfo($org_name, $company_name, $app_name, $company_app)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organizationsOrgNameCompaniesCompanyNameAppsAppNamePutAsyncWithHttpInfo
     *
     * Update company app
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organizationsOrgNameCompaniesCompanyNameAppsAppNamePutAsyncWithHttpInfo($org_name, $company_name, $app_name, $company_app = null)
    {
        $returnType = '\OpenAPI\Client\Model\CompanyApp';
        $request = $this->organizationsOrgNameCompaniesCompanyNameAppsAppNamePutRequest($org_name, $company_name, $app_name, $company_app);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organizationsOrgNameCompaniesCompanyNameAppsAppNamePut'
     *
     * @param  string $org_name Name of the organization. (required)
     * @param  string $company_name Name of the company. (required)
     * @param  string $app_name Name of the application. (required)
     * @param  \OpenAPI\Client\Model\CompanyApp $company_app Company app details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function organizationsOrgNameCompaniesCompanyNameAppsAppNamePutRequest($org_name, $company_name, $app_name, $company_app = null)
    {
        // verify the required parameter 'org_name' is set
        if ($org_name === null || (is_array($org_name) && count($org_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_name when calling organizationsOrgNameCompaniesCompanyNameAppsAppNamePut'
            );
        }
        // verify the required parameter 'company_name' is set
        if ($company_name === null || (is_array($company_name) && count($company_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_name when calling organizationsOrgNameCompaniesCompanyNameAppsAppNamePut'
            );
        }
        // verify the required parameter 'app_name' is set
        if ($app_name === null || (is_array($app_name) && count($app_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_name when calling organizationsOrgNameCompaniesCompanyNameAppsAppNamePut'
            );
        }

        $resourcePath = '/organizations/{org_name}/companies/{company_name}/apps/{app_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($org_name !== null) {
            $resourcePath = str_replace(
                '{' . 'org_name' . '}',
                ObjectSerializer::toPathValue($org_name),
                $resourcePath
            );
        }
        // path params
        if ($company_name !== null) {
            $resourcePath = str_replace(
                '{' . 'company_name' . '}',
                ObjectSerializer::toPathValue($company_name),
                $resourcePath
            );
        }
        // path params
        if ($app_name !== null) {
            $resourcePath = str_replace(
                '{' . 'app_name' . '}',
                ObjectSerializer::toPathValue($app_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($company_app)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($company_app));
            } else {
                $httpBody = $company_app;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
